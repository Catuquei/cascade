package cascade.features.modules.exploit;

import cascade.Cascade;
import cascade.event.events.MoveEvent;
import cascade.event.events.PacketEvent;
import cascade.features.modules.Module;
import cascade.features.modules.player.Freecam;
import cascade.features.setting.Setting;
import cascade.mixin.mixins.accessor.ITimer;
import cascade.util.entity.EntityUtil;
import cascade.util.misc.MathUtil;
import cascade.util.misc.Timer;
import cascade.util.player.MovementUtil;
import cascade.util.player.PhysicsUtil;
import cascade.util.player.PlayerUtil;
import com.mojang.realmsclient.gui.ChatFormatting;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraftforge.client.event.InputUpdateEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class FastMotion extends Module {

    public FastMotion() {
        super("FastMotion", Category.EXPLOIT, "Longjump for liquids");
        INSTANCE = this;
    }

    Setting<Boolean> useTimer = register(new Setting("UseTimer", true));
    Setting<Float> wFactor = register(new Setting("WFactor", 64.0f, 0.1f, 80.0f));
    Setting<Float> lFactor = register(new Setting("LFactor", 105.0f, 0.1f, 250.0f));
    Setting<Float> lVFactor = register(new Setting("LVertical", 1.0f, 0.1f, 20.0f));
    public static FastMotion INSTANCE;
    boolean flag;

    public static FastMotion getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new FastMotion();
        }
        return INSTANCE;
    }


    @Override
    public void onToggle() {
        flag = false;
    }

    @SubscribeEvent
    public void onMove(MoveEvent e) {
        if (!MovementUtil.isMoving() || isDisabled()) {
            return;
        }
        if (Cascade.packetManager.getCaughtPPS()) {
            return;
        }
        if (PlayerUtil.isInLiquid() && shouldBoost()) {
            mc.getConnection().sendPacket(new CPacketEntityAction(mc.player, CPacketEntityAction.Action.START_SPRINTING));
            mc.player.setSprinting(true);
            if (!mc.gameSettings.keyBindSneak.isKeyDown() && mc.gameSettings.keyBindJump.isKeyDown()) {
                e.setY(0.11);
                flag = false;
            } else if (mc.gameSettings.keyBindSneak.isKeyDown() && !mc.gameSettings.keyBindJump.isKeyDown()) {
                mc.player.setSneaking(false);
                flag = false;
            } else {
                e.setY(0);
                flag = !flag;
            }
            e.setX(e.getX() * (mc.player.isInLava() ? lFactor.getValue() : wFactor.getValue()));
            e.setY(lVFactor.getValue() <= 1.0f ? 0 : e.getY() * lVFactor.getValue());
            e.setZ(e.getZ() * (mc.player.isInLava() ? lFactor.getValue() : wFactor.getValue()));
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.Send e) {
        if (isDisabled() || fullNullCheck() || !EntityUtil.isInLiquid()) {
            return;
        }

        if (e.getPacket() instanceof CPacketPlayer.Position || e.getPacket() instanceof CPacketPlayer.PositionRotation) {
            if (flag) {
                ((CPacketPlayer) e.getPacket()).y -= 0.005;
            }
        }
    }

    @SubscribeEvent
    public void onInputUpdate(InputUpdateEvent e) {
        if (fullNullCheck() || isDisabled() || Freecam.getInstance().isEnabled() || Cascade.packetManager.getCaughtPPS()) {
            return;
        }
        if (mc.gameSettings.keyBindSneak.isKeyDown() && PlayerUtil.isInLiquid() && MovementUtil.isMoving() && shouldBoost()) {
            e.getMovementInput().moveStrafe *= 5.0f;
            e.getMovementInput().moveForward *= 5.0f;
        }
    }

    /*public void knockBack(Entity entityIn, float strength, double xRatio, double zRatio) {
        LivingKnockBackEvent event = ForgeHooks.onLivingKnockBack(this, entityIn, strength, xRatio, zRatio);
        if (!event.isCanceled()) {
            strength = event.getStrength();
            xRatio = event.getRatioX();
            zRatio = event.getRatioZ();
            if (this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).getAttributeValue()) {
                this.isAirBorne = true;
                float f = MathHelper.sqrt(xRatio * xRatio + zRatio * zRatio);
                this.motionX /= 2.0D;
                this.motionZ /= 2.0D;
                this.motionX -= xRatio / (double) f * (double) strength;
                this.motionZ -= zRatio / (double) f * (double) strength;
                if (this.onGround) {
                    this.motionY /= 2.0D;
                    this.motionY += (double) strength;
                    if (this.motionY > 0.4000000059604645D) {
                        this.motionY = 0.4000000059604645D;
                    }
                }
            }
        }
    }*/

    public boolean shouldBoost() {
        return Cascade.packetManager.isValidEntityStatus() && !mc.player.onGround;
    }
}