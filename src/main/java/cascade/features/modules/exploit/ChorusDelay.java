package cascade.features.modules.exploit;

import cascade.event.events.PacketEvent;
import cascade.mixin.mixins.accessor.ISPacketPlayerPosLook;
import cascade.features.modules.Module;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class ChorusDelay extends Module {

    public ChorusDelay() {
        super("ChorusDelay", Category.EXPLOIT, "Manipulates your chorus");
        INSTANCE = this;
    }

    static ChorusDelay INSTANCE;

    public static ChorusDelay getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new ChorusDelay();
        }
        return INSTANCE;
    }

    public SPacketPlayerPosLook sPacketPlayerPosLook;
    public BlockPos originalPos;

    @Override
    public void onEnable() {
        sPacketPlayerPosLook = null;
        originalPos = mc.player.getPosition();
    }

    @Override
    public void onDisable() {
        if (sPacketPlayerPosLook != null && mc.player != null) {
            mc.player.setPosition(sPacketPlayerPosLook.x, sPacketPlayerPosLook.y, sPacketPlayerPosLook.z);
            originalPos = null;
        }
    }

    @SubscribeEvent(priority = EventPriority.HIGHEST, receiveCanceled = true)
    public void onPacketReceive(final PacketEvent.Receive e) {
        if (fullNullCheck() || isDisabled()) {
            return;
        }
        if (e.getPacket() instanceof SPacketPlayerPosLook) {
            try {
                SPacketPlayerPosLook packet = e.getPacket();
                sPacketPlayerPosLook = e.getPacket();
                ((ISPacketPlayerPosLook)packet).setX(((SPacketPlayerPosLook) e.getPacket()).getX());
                ((ISPacketPlayerPosLook)packet).setY(((SPacketPlayerPosLook) e.getPacket()).getY());
                ((ISPacketPlayerPosLook)packet).setZ(((SPacketPlayerPosLook) e.getPacket()).getZ());
                ((ISPacketPlayerPosLook)packet).setYaw(mc.player.rotationYaw);
                ((ISPacketPlayerPosLook)packet).setPitch(mc.player.rotationPitch);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @SubscribeEvent(priority = EventPriority.HIGHEST, receiveCanceled = true)
    public void onPacketSend(final PacketEvent.Send e) {
        if (fullNullCheck() || isDisabled()) {
            return;
        }
        if (e.getPacket() instanceof CPacketPlayer) {
            e.setCanceled(true);
        }
        if (e.getPacket() instanceof CPacketConfirmTeleport) {
            e.setCanceled(true);
        }
    }
}